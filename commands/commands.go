package commands

import (
	"fmt"
	"github.com/codegangsta/cli"
)

//ErrorHandler -
type ErrorHandler struct {
	ExitCode int
	Error    error
}

// CreateInitCommand - Creates CLI command for initializing the site structure
func CreateInitCommand(eh *ErrorHandler) (command cli.Command) {
	flags := []cli.Flag{}
	flag := cli.BoolFlag{
		Name:  "force, f",
		Usage: "Force create the directories even if warnings exist",
	}
	flags = append(flags, flag)
	flag = cli.BoolFlag{
		Name:  "example, e",
		Usage: "Generates an example website to show usage",
	}
	flags = append(flags, flag)
	command = cli.Command{
		Name:        "init-site",
		Usage:       "Initializes the Website directories. Try init-site --help for more options",
		Description: "Initializes the Website directories. This operation will not overwrite anything unless the force flag is passed",
		Action:      func(c *cli.Context) (err error) {
				fmt.Println("hello World")
				return
		},
		Flags:       flags,
	}
	return
}

// CreateBuildCommand - Creates CLI command for compiling the files into a static website
func CreateBuildCommand(eh *ErrorHandler) (command cli.Command) {
	flags := []cli.Flag{}
	flag := cli.BoolFlag{
		Name:  "typescript, t",
		Usage: "Compiles only the TypeScript files",
	}
	flags = append(flags, flag)
	flag = cli.BoolFlag{
		Name:  "sass, s",
		Usage: "Compiles only the sass files",
	}
	flags = append(flags, flag)
	flag = cli.BoolFlag{
		Name:  "markdown, m",
		Usage: "Compiles only the markdown files",
	}
	flags = append(flags, flag)
	command = cli.Command{
		Name:        "build",
		Usage:       "Builds and Compiles all the website files into a static website",
		Description: "Compiles down all the sass, TypeScript and Markdown into a static site. By default compiles all files",
		Action:      func(c *cli.Context) (err error) {
			fmt.Println("hello World")
			return
		},
		Flags:       flags,
	}
	return
}

// CreateCleanCommand - Creates CLI command for cleaning the files generated by the build command
func CreateCleanCommand(eh *ErrorHandler) (command cli.Command) {
	flags := []cli.Flag{}
	command = cli.Command{
		Name:        "clean",
		Usage:       "Removes all the files generated by the build command",
		Description: "Removes all the files generated by the build command, this includes all the cached files",
		Action:      func(c *cli.Context) (err error) {
			fmt.Println("hello World")
			return
		},
		Flags:       flags,
	}
	return
}

// CreateServeCommand - Creates CLI command for serving a real time view of the website
func CreateServeCommand(eh *ErrorHandler) (command cli.Command) {
	flags := []cli.Flag{}
	flag := cli.IntFlag{
		Name:  "port, p",
		Usage: "The desired port for which the site will be served",
	}
	flags = append(flags, flag)
	command = cli.Command{
		Name:        "serve",
		Usage:       "Serves the site on port 8080, listens for and compiles on changes",
		Description: "Serves the site on port 8080, listens for and compiles on changes",
		Action:      func(c *cli.Context) (err error) {
			fmt.Println("hello World")
			return
		},
		Flags:       flags,
	}
	return
}


func CreateCreateComponentCommand(eh *ErrorHandler) (command cli.Command) {
	flags := []cli.Flag{}
	command = cli.Command{
		Name:        "create-component",
		Usage:       "Creates the skeleton files for creating a markdown component",
		Description: "Creates the skeleton files for creating a markdown component",
		Action:      func(c *cli.Context) (err error) {
			fmt.Println("hello World")
			return
		},
		Flags:       flags,
	}
	return
}
